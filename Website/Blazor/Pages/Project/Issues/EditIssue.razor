@page "/issue/{ProjectCode}-{IssueId:int}/edit"
@inject IHttpContextAccessor HttpContextAccessor
@layout FixIssueLayout
@attribute [Auth]

@if (!Database.Issues
.Include(s => s.Project)
.Any(s => s.Project!.ProjectCode == ProjectCode && s.IssueId == IssueId))
{
    <NotFoundPage />
    return;
}
<div class="cont">
    <div class="flex">
        <div class="center">
            <h3 class="center-text">
                @Localizer["issue_edit_header"] <b>@(ProjectCode)-@(IssueId)</b>
            </h3>
            <div class="content" style="left: 50%">
                <div class="box" style="width: 100%">
                    <form method="post" id="login_form" action="/api/issues/edit">

                        <input type="hidden" name="issueGuid" value="@(issue.Uuid)">
                        @foreach (var f in files)
                        {
                            <input type="hidden" name="keepfile-@(f.Guid)" value="True">
                        }

                        <label for="title">@Localizer["edit_title"]</label>
                        <input type="text" id="title" name="title" value="@title">

                        <label for="issueStatus">@Localizer["edit_status"]</label>
                        <select name="issueStatus" id="issueStatus">
                            @foreach (var p in Enum.GetValues<IssueStatus>())
                            {
                                @if (p == issue.Status)
                                {
                                    <option selected value="@p">@Localizer[p.GetIssueStatusName()]</option>
                                }
                                else
                                {
                                    <option value="@p">@Localizer[p.GetIssueStatusName()]</option>
                                }
                            }
                        </select>

                        <label for="issueType">@Localizer["edit_type"]</label>
                        <select name="issueType" id="issueType">
                            @foreach (var p in Enum.GetValues<IssueType>().Except([IssueType.None]))
                            {
                                @if (p == type)
                                {
                                    <option selected value="@p">@Localizer[p.GetIssueTypeName()]</option>
                                }
                                else
                                {
                                    <option value="@p">@Localizer[p.GetIssueTypeName()]</option>
                                }
                            }
                        </select>

                        <label for="targetversions">@Localizer["edit_affected"]</label>
                        <DropdownCheckbox Title="@selectedVersionsTitle" Items='items' />

                        <label for="fixedIn">@Localizer["edit_fixed_in"]</label>
                        <select name="fixedIn" id="fixedIn">
                            <option value="">@Localizer["edit_not_selected"]</option>
                            @foreach (var v in versions)
                            {
                                @if (v == issue.FixedInVersion)
                                {
                                    <option selected value="@(v.Name)">@(v.Name)</option>
                                }
                                else
                                {
                                    <option value="@(v.Name)">@(v.Name)</option>
                                }
                            }
                        </select>


                        <label for="issueConfirmation">@Localizer["edit_confirmation"]</label>
                        <select name="issueConfirmation" id="issueConfirmation">
                            @foreach (var p in Enum.GetValues<ConfirmationStatus>().Except([ConfirmationStatus.None]))
                            {
                                @if (p == conf)
                                {
                                    <option selected value="@p">@Localizer[p.GetIssueConfirmation()]</option>
                                }
                                else
                                {
                                    <option value="@p">@Localizer[p.GetIssueConfirmation()]</option>
                                }
                            }
                        </select>

                        <label for="issueSolution">@Localizer["edit_solution"]</label>
                        <select name="issueSolution" id="issueSolution">
                            @foreach (var p in Enum.GetValues<IssueSolution>())
                            {
                                @if (p == issue.Solution)
                                {
                                    <option selected value="@p">@Localizer[p.GetIssueSolutionName()]</option>
                                }
                                else
                                {
                                    <option value="@p">@Localizer[p.GetIssueSolutionName()]</option>
                                }
                            }
                        </select>

                        <label for="description">@Localizer["edit_description"] (<span class="clickme" @onclick="() => previewDescription = !previewDescription">@(previewDescription? @Localizer["edit_description_edit"] : @Localizer["edit_description_preview"])</span>)</label>
                        @if (previewDescription)
                        {
                            <div class="preview">
                                <Markdown MarkdownString="@description" />
                            </div>

                        }
                        else
                        {
                            <textarea placeholder=@Localizer["edit_description_markdown"] id="description" name="description" @bind="description"></textarea>
                        }

                        @if (issue.UserAssigned != null && !_assigneeRemoved)
                        {
                            <input type="hidden" name="keep-assignee" value="True" />
                            <label>@Localizer["edit_assigned"] (<span class="clickme" @onclick="() => _assigneeRemoved = true">@Localizer["edit_detach"]</span>)</label>
                            <AccountBadge User="issue.UserAssigned" />
                            <br />
                        }

                        <label for="files">@Localizer["edit_attach"]</label>
                        <div class="attached-files">
                            @foreach (var file in files)
                            {
                                <FileBadgeRemoveable EventHandler="FileRemove" FileModel="file" />
                            }
                        </div>
                        <br />
                        <input type="file" multiple="" id="files" name="files">

                        <div class="actions">
                            <button type="button" style="left: 0" @onclick='() => { Navigation.NavigateTo($"/issue/{ProjectCode}-{IssueId}"); }'>@Localizer["edit_cancel"]</button>
                            <button type="submit">@Localizer["edit_save"]</button>
                        </div>
                        <p id="login_error" style="color: red; text-align: center"></p>
                    </form>
                </div>
                <script>post_login_form();</script>
            </div>
        </div>
    </div>
</div>
@code {
    [Inject] DatabaseContext Database { get; set; }
    [CascadingParameter] public required FixIssueLayout Layout { get; set; }
    [Parameter] public required string ProjectCode { get; set; }
    [Parameter] public required int IssueId { get; set; }
    string title;
    string description;
    bool previewDescription = false;
    List<VersionModel> versions = new();
    IssueType type;
    ConfirmationStatus conf;
    List<DropdownItem> items;
    List<AttachedFileModel?> files;
    List<string> fileGuids;
    IssueModel issue;

    private bool _assigneeRemoved;
    //TODO: !!!!!! ДОДЕЛАЙ УДАЛЕНИЕ ФАЙЛОВ!!!
    protected override void OnParametersSet()
    {
        versions = Database.Versions
            .Include(s => s.Project)
            .Where(s => s.Project!.ProjectCode == ProjectCode)
            .OrderByDescending(s => s.Priority).ToList();
        issue = Database.Issues.Include(s => s.UserAssigned).First(s => s.IssueId == IssueId && s.Project.ProjectCode == ProjectCode);
        title = issue.Title!;
        description = issue.Description!;
        type = issue.IssueType;
        conf = issue.ConfirmationStatus;
        files = issue.AttachedFiles?.Select(s => Database.AttachedFiles.FirstOrDefault(s2 => s2.Guid == s)).ToList() ?? [];
        items = Database.Versions
            .Where(s => s.Project.ProjectCode == ProjectCode)
            .OrderByDescending(s => s.Priority)
            .ToList()
            .Select(s => new DropdownItem
            {
                Text = s.Name,
                Selected = issue.AffectedVersionIds?.Contains(s.Id) ?? false
            }).ToList();

        if (items.Any(s => s.Selected))
            selectedVersionsTitle = string.Join(", ", items.Where(s => s.Selected).Select(s => s.Text));
        fileGuids = files.Select(s => s?.Guid ?? "").ToList();
        Layout.ProjectCode = ProjectCode;
        base.OnParametersSet();
    }
    private string selectedVersionsTitle = "Выбрать...";

    protected override async Task OnInitializedAsync()
    {
        var context = HttpContextAccessor.HttpContext;
        if (context == null || !context.Request.TryAuthenticate(out _))
        {
            Navigation.NavigateTo($"/login?redir=/issue/{ProjectCode}-{IssueId}/edit", true);
            return;
        }
    }

    private void FileRemove(object? sender, EventArgs e)
    {
        files.Remove(files.FirstOrDefault(s => s?.Guid == (string)sender!));
        StateHasChanged();
    }

}
